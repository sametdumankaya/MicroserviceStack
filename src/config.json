{
    "_comments": [
        "For 'L0_input':",
        "   - 'type': 'file' or 'http'",
        "   - 'src': path for 'file' (i.e. './alerts.json') or url for 'http' ",
        "   - 'node_label_prefix': (optional) prefix string for l0 node name, the agent will add the index to this prefix",
        "   - 'node_props': (optional) list of prop to keep from l0. Take all if not exists",
        "For 'L2_input':",
        "   - 'type': only 'file' for now",
        "   - 'src': path for l2 input (semantic Category) 'file' (i.e. './TeleologicalCatSemanticSeverity.xlsx') ",
        "   - 'src2': path for l2 input (network topology)' file' (i.e. './LargestCC_topologyBorg.graphml') ",
        "For 'pre-processing' and 'processing':",
        "   Dictionary of processing phase object. For each processing phase object:",
        "   - 'id':' id to display on trace and to identify object",
        "   - 'target_kg': target knowledge (i.e. 'l1', 'l2' or 'l1_batch')",
        "   - 'target_prop': target property",
        "   - 'support_kg': support knowledge (i.e. 'l1', 'l2' or 'l1_batch')",
        "   - 'support_prop': support property",
        "   - 'strategy': strategy to use, one on 'max', 'formula', 'string', 'inc', 'radius', 'merge', 'default'",
        "       - 'inc': increment 'target_prop' on 'target_kg' for each element of 'support_kg' in relation",
        "       - 'max': calculate max of 'target_prop' on 'target_kg', and set 'target_kg.max' property to this (can be use later in formula for exemple)",
        "       - 'merge': merge 'support_kg' on 'target_kg'",
        "       - 'formula': run a formula for 'target_prop' on 'target_kg'. Optional, Can filter per 'src' (for l2).",
        "       - 'radius': add to 'target_prop' on 'target_kg' a contribution from immediate neighbourgs",
        "       - 'string': assign 'support_prop' from 'support_kg' on 'target_prop' on 'target_kg', for string property",
        "       - 'default': basically as 'string', but for numeric",
        "For output:",
        "   - 'type': only 'http' for now",
        "   - 'endpoint': remote endpoint to send data",
        "   - 'enable': activate/deactivate output",
        "parameters:",
        "   - 'use_l2_feedback':' true/false, use l2 feedback processing",
        "   - 'l1decomp-batch':' int, Nb of L1 concept to take in count per batch",
        "   - 'l2decomp-batch':' int, Nb of L2 concept to take in count per batch",
        "   - 'dump_l0':' true/false, Dump L0 into graphml file",
        "   - 'dump_l1':' true/false, Dump L1 into graphml file",
        "   - 'dump_l2':' true/false, Dump L2 into graphml file",
        "   - 'top_l1_stats':' true/false, display top L1 concepts",
        "   - 'top_l2_stats':' true/false, display top L2 concepts",
        "   - 'max_loops': int, nb max of process loop, -1 if no max",
        "   - 'max_batchs': int, nb max of batch to ingest, -1 if no max"
    ],
    "L0_input": {
        "typehttp": "http", 
        "srchttp": "10.200.97.8",
        "type": "file", 
        "src": "./alerts.json",
        "node_label_prefix": "alert_",
        "node_props": ["snippet", "multiple_line_values", "severity", "title", "external_text", "text", "labels", 
            "result_type", "module_date_modified", "ic_type", "alert_id", "issue_id", "external_title", "authors", "date",
            "problem_id", "name", "deviceId", "swType", "userField3", "userField2", "swVersion", "userField4", "productType", 
            "productId", "deviceName", "deviceSysname", "deviceIp", "deviceType", "deviceStatus", "collector", "ipAddress", 
            "configStatus", "inventoryTime", "productFamily", "userField1", "date", "cpyKey", "already_seen", 
            "computed_labels", "feedback_for_cpyKey", "pin_importance", "rank_confidence", "rank_feedback", "rank_new", 
            "rank_pin", "rank_sev", "rank"]
    },
    "L2_input": {
        "type": "file", 
        "src": "./TeleologicalCatSemanticSeverity.xlsx",
        "src2": "./troubleshoot/LargestCC_topologyBorg.graphml"
    },
    "pre-processing": {
        "0": {  "id": 0,
            "comment": "Calculate max for 'alert_count' on l2",
            "target_kg": "l2",
            "target_prop": "alert_count",
            "strategy": "max"},
        "1": {  "id": 1,
            "comment": "Updating 'numeric_severity' on l2 from formula",
            "target_kg": "l2", 
            "target_prop": "numeric_severity",
            "src": "uniqtitle, teleo_regex",
            "formula": "global formula_value; ratio = {'critical': 1.0, 'error': 0.7, 'warning': 0.5}; formula_value = ((node_props['alert_count']/target_kg.max)*ratio[node_props['severity']]) if node_props['severity'] in ratio and target_kg.max>0.0 else 0.0;",
            "strategy": "formula"}
    },     
    "processing": {
        "0": {  "id": 0,
            "comment": "Compute l1 'dfre_severity' field from l2 'numeric_severity'",
            "target_kg": "l1_batch",
            "target_prop": "dfre_severity",
            "support_kg": "l2",
            "support_prop": "numeric_severity",
            "strategy": "default", "options": {"novelty_matters": true}},
        "1": {  "id": 1,
            "comment": "Compute l1 'dfre_semantic_severity' field from l2 'semantic_severity'",
            "target_kg": "l1_batch",
            "target_prop": "dfre_semantic_severity",
            "support_kg": "l2",
            "support_prop": "semantic_severity",
            "strategy": "string"},
        "2": {  "id": 2,
            "comment": "Compute l1 'dfre_category' field from l2 'category1'",
            "target_kg": "l1_batch",
            "target_prop": "dfre_category",
            "support_kg": "l2",
            "support_prop": "category1",
            "strategy": "string"},
        "3": {  "id": 3,
            "comment": "Merge l1_batch into l1",
            "target_kg": "l1",
            "support_kg": "l1_batch",
            "strategy": "merge"},
        "4": {  "id": 4,
            "comment": "Update 'alert_count' on l2 from new alerts on l1_batch",
            "target_kg": "l2",
            "target_prop": "alert_count",
            "support_kg": "l1_batch",
            "support_prop": "",
            "strategy": "inc"},
        "5": {  "id": 5,
            "comment": "Calculate max for 'alert_count' on l2",
            "target_kg": "l2",
            "target_prop": "alert_count",
            "strategy": "max"},
        "6": {  "id": 6,
            "comment": "Updating 'numeric_severity' on l2 from formula",
            "src": "uniqtitle, teleo_regex",
            "target_kg": "l2",
            "target_prop": "numeric_severity",
            "formula": "global formula_value; ratio = {'critical': 1.0, 'error': 0.7, 'warning': 0.5}; formula_value = ((node_props['alert_count']/target_kg.max)*ratio[node_props['severity']]) if node_props['severity'] in ratio and target_kg.max>0.0 else 0.0;",
            "strategy": "formula"},
        "8": {  "id": 8,
            "comment": "Updating 'numeric_severity' on l2 from formula",
            "src": "topology",
            "target_kg": "l2",
            "target_prop": "numeric_severity",
            "support_kg": "l1",
            "support_prop": "dfre_severity",
            "strategy": "radius"},
        "9": {  "id": 9,
            "comment": "Compute l1 'dfre_severity' field from l2 'numeric_severity'",
            "target_kg": "l1",
            "target_prop": "dfre_severity",
            "support_kg": "l2",
            "support_prop": "numeric_severity",
            "strategy": "default", "options": {"novelty_matters": true}
        }
        },
    "output": {
        "type": "http",
        "endpoint": "http://localhost:8080/l2/alerts",
        "remote_endpoint": "http://10.200.97.8:8082/l2/alerts",
        "enable": false
    },
    "parameters": {
        "use_l2_feedback": false,
        "l1decomp_batch": 1000,
        "l2decomp_batch": 150,
        "max_loops": 1,
        "max_batchs": 1,
        "dump_l0": false,
        "dump_l1": true,
        "dump_l2": true,
        "top_l1_stats": true,
        "top_l2_stats": true,
        "add_l1_edges": false
    }
}